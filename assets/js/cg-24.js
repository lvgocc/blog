(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{437:function(t,a,s){"use strict";s.r(a);var e=s(22),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"java-并发机制的底层实现原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-并发机制的底层实现原理"}},[t._v("#")]),t._v(" Java 并发机制的底层实现原理")]),t._v(" "),s("blockquote",[s("p",[t._v("Java 代码在编译后会变成 Java 字节码, 字节码被类加载器加载到 JVM 里, JVM 执行字节码, 最终需要转化成为汇编指令在 CPU 上执行, Java中所使用的并发机制依赖于 JVM 的实现和 CPU 的指令 .")])]),t._v(" "),s("h2",{attrs:{id:"volatile-的应用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#volatile-的应用"}},[t._v("#")]),t._v(" volatile 的应用")]),t._v(" "),s("p",[t._v('volatile 是轻量级的 synchronize , 它可以保证变量在多线程环境的"可见性",  "可见性"是指当一个线程修改了共享变量, 另一个线程能够读到这个修改的值. (根据缓存一致性实现) 和 禁止指令重排序, 但它不是并发安全的.')]),t._v(" "),s("p",[t._v("在多线程场景下 并发的自增")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" variable "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n * variable++这样的操作不是一个原子性操作，\n * 它分为读、加加、写。\n * 以下这种情况，\n * 当线程1读取了variable的值，还没有修改，\n * 线程2也读取了，线程1修改完了，\n * 通知线程2将线程的缓存的variable的值无效需要重读，\n * 可这时它不需要读取variable，它仍执行写操作，\n * 然后赋值给主线程，这时数据就会出现问题。\n */")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br")])]),s("h3",{attrs:{id:"cpu-术语"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cpu-术语"}},[t._v("#")]),t._v(" CPU 术语")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("术语")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("英文")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("术语描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("内存屏障")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("memory barriers")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("是一组处理器指令, 用于实现对内存操作的顺序限制")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("缓冲行")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("cache line")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("缓存中可以分配的最小存储单位. 处理器填写缓存线时会加载整个缓存线, "),s("br"),t._v("需要使用多个主内存读周期")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("原子操作")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("atomic operations")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("不可中断的一个或一系列操作")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("缓存行填充")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("cache line fill")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("当处理器识别到从内存中读取操作数是可缓存的, "),s("br"),t._v("处理器读取整个缓存行到适当的缓存(L1,L2,L3的或所有)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("缓存命中")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("cache hit")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("如果进行告诉缓存行填充操作的内存地址仍然是下次处理器访问的地址时, "),s("br"),t._v("处理器从缓存中读取操作数, 而不是从内存读取")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("写命中")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("write hit")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("当处理器将操作数协会到一个内存缓存的区域时, "),s("br"),t._v("它首先会检查这个缓存的内存地址是否在缓存行中, 如果存在一个有效的缓存行"),s("br"),t._v("则处理器将这个操作数写回到缓存, 而不是写回到内存, 这个操作被称为写命中")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("写缺失")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("write misses the cache")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("一个有效的缓存行被写入一个不存在的内存区域.")])])])]),t._v(" "),s("h3",{attrs:{id:"volatile-的底层实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#volatile-的底层实现"}},[t._v("#")]),t._v(" volatile 的底层实现")]),t._v(" "),s("p",[t._v("书中作者记录了实际操作后到汇编指令阶段的代码, 可以发现使用 volatile 修饰的变量在转变成汇编指令时 , 多了一个前缀 "),s("code",[t._v("lock")]),t._v(",  关于lock指令, 在多核处理器中会引发两个事情")]),t._v(" "),s("ol",[s("li",[t._v("将当前处理器缓存行的数据写回到系统内存(在这一步操作时, 会锁定这块内存的缓存区域)")]),t._v(" "),s("li",[t._v("写回内存的操作会使其他CPU里缓存了该内存地址的数据无效")])]),t._v(" "),s("p",[t._v('这样就保证了 volatile 修饰的变量的"可见性" , 缓存一致性机制会阻止同时修改由两个以上处理器缓存的内存区域数据.')]),t._v(" "),s("blockquote",[s("p",[t._v("扩展内容 : 对于 volatile 的底层实现, 在不同的硬件上实现不同, 在 intel486 和 pentium 处理器上会在总线上声明 lock# 信号, 相反在P6处理器中, 如果访问的数据已经缓存在处理器内部, 再不会声明 lock# 信号, 它会锁定这块区域的缓存.")])]),t._v(" "),s("h2",{attrs:{id:"synchronized-的应用和原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#synchronized-的应用和原理"}},[t._v("#")]),t._v(" synchronized 的应用和原理")]),t._v(" "),s("p",[t._v("synchronized 的三种使用场景")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 普通方法 , 锁是当前类的实例对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("syncMethod")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 静态方法, 锁是当前类的 Class 对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("staticSyncMethod")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代码块 , 锁是括号内对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("innerSyncMethod")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br")])]),s("p",[s("strong",[t._v("以下摘自书中内容:")])]),t._v(" "),s("p",[t._v("当一个线程视图访问同步代码块时, 它首先必须得到锁. 退出或抛出异常必须释放锁, JVM基于进入和退出 Monitor 对象来实现方法同步和代码块同步.")]),t._v(" "),s("p",[t._v("代码块和方法都可以使用的 monitor enter 指令和 monitor exit 指令实现 .")]),t._v(" "),s("p",[t._v("在代码编译后, 会在同步方法或同步方法块前插入 monitor enter , 将 monitor exit 插入异常或方法结束处, 一个 monitor enter 必须有一个 monitor exit 对应.")]),t._v(" "),s("p",[t._v("每一个对象都会有一个 monitor 与其关联,  线程执行到 monitor enter 指令时, 将会尝试获得 monitor 的所有权, 即尝试获取锁, 当 monitor 被持有后, 它将处于锁定状态 .")]),t._v(" "),s("p",[s("strong",[t._v("锁在哪里?")])]),t._v(" "),s("p",[t._v("synchronized 的锁是保存在 Java 对象头里面的, 那对象头里都存了什么呢?")]),t._v(" "),s("h3",{attrs:{id:"java-对象头"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-对象头"}},[t._v("#")]),t._v(" Java 对象头")]),t._v(" "),s("p",[t._v("Java 中每个对象都有一个对象头, 数组比较特殊, 会有单独的一块区域(ArrayLength)保存数组的长度, 需要 4个字节 32bit 的长度空间来保存, 普通对象则需要 2 个字宽来保存 对象类型数据指针, hashcode , 锁, 分代年龄 (MarkDown)")]),t._v(" "),s("p",[t._v("markdown的分布示意图")]),t._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"对象头","data-src":"/images/posts/java-juc-theory/20200810203529454.jpg",loading:"lazy"}})]),t._v(" "),s("h2",{attrs:{id:"锁升级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#锁升级"}},[t._v("#")]),t._v(" 锁升级")]),t._v(" "),s("p",[t._v('在JDK 1.6 对锁的获取和释放做了优化调整, 增加了 "偏向锁" 和 "轻量级锁" , 而锁一共有 4 种状态')]),t._v(" "),s("ul",[s("li",[t._v("无锁")]),t._v(" "),s("li",[t._v("偏向锁")]),t._v(" "),s("li",[t._v("轻量级锁")]),t._v(" "),s("li",[t._v("重量级锁")])]),t._v(" "),s("p",[t._v("锁只能升级不能降级, 目的是为了提高获得和释放锁的效率")]),t._v(" "),s("h3",{attrs:{id:"_1-偏向锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-偏向锁"}},[t._v("#")]),t._v(" 1. 偏向锁")]),t._v(" "),s("p",[t._v("当一个线程访问同步代码块并获取到锁后, 会在对象头和栈帧("),s("em",[t._v("栈帧")]),t._v("是一个内存区块,是一个数据集,是一个有关方法(Method)和运行期数据的数据集)中的锁记录存储锁偏向的线程ID, 以后该线程在进入和退出同步块时不需要进行CAS操作来加锁和解锁 , 只需要判断一下锁记录里面保存的锁偏向线程ID, 与当前线程相同即得到锁, 否则根据对象头中 MarkDown 是否设置了偏向锁标识(1) , 使用CAS将锁偏向线程ID指向当前线程, 否则使用 CAS 来竞争锁.")]),t._v(" "),s("p",[t._v("**偏向锁的撤销(释放)是在等到其他线程在做锁竞争的时候才会去做. **")]),t._v(" "),s("p",[t._v("一旦发生了锁竞争, 首先等待安全点, 将暂停持有锁的线程, 在判断该线程是否存活, 如果不活动, 直接释放, 将对象头改为无所状态.")]),t._v(" "),s("p",[t._v("如果当前线程没执行完, 还在执行, 另一个线程来尝试获取偏向锁, 此时一定是失败. 接下来会继续执行, 首先将正在进行中的线程暂停, 然后将对象头标记为不适用偏向锁, 将偏向锁撤销, 此时锁升级为轻量级锁, 恢复暂停线程.")]),t._v(" "),s("p",[s("strong",[t._v("总结:")]),t._v("  适用在低级锁竞争")]),t._v(" "),s("h3",{attrs:{id:"_2-轻量级锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-轻量级锁"}},[t._v("#")]),t._v(" 2. 轻量级锁")]),t._v(" "),s("p",[t._v("线程在执行到同步代码块时,  JVM首先会在当前线程的栈帧中创建用于保存锁记录的空间, 并将对象头 MarkDown 复制到锁记录中(官方称为Displaced Mark Word), 然后线程尝试使用 CAS 将对象头中的 MarkDown 替换为指向锁记录的指针, 如果成功, 获的锁. 如果失败, 使用 自旋锁 获取锁.")]),t._v(" "),s("p",[s("strong",[t._v("轻量级锁的释放")])]),t._v(" "),s("p",[t._v("将复制出来的 Displaced Mark Word 替换回对象头的 MarkDown 如果成功, 锁释放成功, 如果失败, 说明当前锁存在竞争, 升级为重量级锁.")]),t._v(" "),s("h3",{attrs:{id:"_3-重量级锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-重量级锁"}},[t._v("#")]),t._v(" 3. 重量级锁")]),t._v(" "),s("p",[t._v("当升级为重量级锁, 其他线程想要获取锁时, 只有被阻塞. 等待锁释放, 唤醒等待的线程, 进行新一轮的锁竞争.")]),t._v(" "),s("h2",{attrs:{id:"锁比较"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#锁比较"}},[t._v("#")]),t._v(" 锁比较")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("锁")]),t._v(" "),s("th",[t._v("优点")]),t._v(" "),s("th",[t._v("缺点")]),t._v(" "),s("th",[t._v("适用场景")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("偏向锁")]),t._v(" "),s("td",[t._v("加锁解锁不需要额外的消耗,"),s("br"),t._v("和无锁状态差距纳秒级别")]),t._v(" "),s("td",[t._v("线程存在竞争会带来额外消耗")]),t._v(" "),s("td",[t._v("只有一个线程访问同步代码块")])]),t._v(" "),s("tr",[s("td",[t._v("轻量级锁")]),t._v(" "),s("td",[t._v("竞争的线程不会阻塞, 提高了性能")]),t._v(" "),s("td",[t._v("始终得不到锁的线程会自旋浪费CPU")]),t._v(" "),s("td",[t._v("追求响应速度, 代码块执行速度快")])]),t._v(" "),s("tr",[s("td",[t._v("重量级锁")]),t._v(" "),s("td",[t._v("线程不会自旋, 不会浪费CPU")]),t._v(" "),s("td",[t._v("线程阻塞, 响应时间慢")]),t._v(" "),s("td",[t._v("追求吞吐量, 同步代码块执行时间长")])])])]),t._v(" "),s("p",[s("strong",[t._v("小结:")])]),t._v(" "),s("p",[t._v("除了偏向锁, JVM实现锁的方式都用了循环CAS，即当一个线程想进入同步块的时候使用循环CAS的方式来获取锁，当它退出同步块的时候使用循环CAS释放锁。")]),t._v(" "),s("p",[t._v("java 中的原子性通过锁和CAS来实现.")])])}),[],!1,null,null,null);a.default=n.exports}}]);