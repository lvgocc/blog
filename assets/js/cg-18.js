(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{431:function(a,v,t){"use strict";t.r(v);var s=t(22),_=Object(s.a)({},(function(){var a=this,v=a.$createElement,t=a._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"java-内存模型-jmm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-内存模型-jmm"}},[a._v("#")]),a._v(" Java 内存模型 ( JMM )")]),a._v(" "),t("blockquote",[t("p",[a._v("多线程场景下需关注 , 单线程数据竞争可以通过JMM的顺序一致性来保证, 不会出现数据竞争")])]),a._v(" "),t("p",[a._v("并发编程中, 线程间通信有两种方式")]),a._v(" "),t("ol",[t("li",[a._v("共享内存(隐式)")]),a._v(" "),t("li",[a._v("消息传递(显式)")])]),a._v(" "),t("p",[a._v("而我们这里要记录的则是 Java 线程间通信使用的 "),t("strong",[a._v("共享内存")]),a._v(", 也就是 Java 的内存是怎么样子的")]),a._v(" "),t("h2",{attrs:{id:"java-内存模型基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-内存模型基础"}},[a._v("#")]),a._v(" Java 内存模型基础")]),a._v(" "),t("h3",{attrs:{id:"基本概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[a._v("#")]),a._v(" 基本概念")]),a._v(" "),t("blockquote",[t("p",[a._v("Java 的内存对于我们开发人员来讲, 是不可见的, 是透明的.")])]),a._v(" "),t("p",[a._v("Java 的线程间通信使用的是 共享内存 方式进行隐式通信, 所以对于我们开发人员来讲,  这部分不可见的内容存在了很多隐患问题.")]),a._v(" "),t("p",[a._v("在 Java 中分为共享内存和私有内存, 而这些概念也是由 Java 本身自己来控制的, 并不真实存在")]),a._v(" "),t("p",[a._v("主内存: i = 1")]),a._v(" "),t("p",[a._v("线程A: 与 线程B:")]),a._v(" "),t("p",[a._v("如果线程 A 与 线程 B 间想要通信, 那么必须通过 主内存(共享内存) 来实现.  Java 通过 JMM 来控制每个线程和主内存的交互, 从而来实现开发人员对内存的可见性")]),a._v(" "),t("h3",{attrs:{id:"重排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重排序"}},[a._v("#")]),a._v(" 重排序")]),a._v(" "),t("blockquote",[t("p",[a._v("Java 执行过程中为了提高性能, 会对执行进行重新排序")])]),a._v(" "),t("ol",[t("li",[a._v("编译器重排序 (不改变语义的情况下重排序)")]),a._v(" "),t("li",[a._v("指令并行重排序 (处理器多条指令并行时, 不存在数据依赖, 可以进行重排序)")]),a._v(" "),t("li",[a._v("内存系统重排序 ( 内存读写缓冲行 , 可能会重排序)")])]),a._v(" "),t("p",[a._v("第一种为 JAVA 本身的编译器重排序, 可以通过 JMM 来进行控制, 而2,3属于CPU级重排序, Java 不能直接控制, 所以 Java 使用在生成指令时在中间插入 内存屏障指令 这种方式来实现禁止重排序.")]),a._v(" "),t("h3",{attrs:{id:"happends-before"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#happends-before"}},[a._v("#")]),a._v(" happends - before")]),a._v(" "),t("blockquote",[t("p",[a._v("happends - before 规则是指, 当一个操作结束后, 结果对另一个操作可见, 其中包括")])]),a._v(" "),t("ol",[t("li",[a._v("程序顺序 : 一个线程的每步操作")]),a._v(" "),t("li",[a._v("监视器锁释放 : 一个监视器解锁应对另一个监视器加锁可见")]),a._v(" "),t("li",[a._v("volatile变量: 一个volatile域的写, 要对其他对volatile域的读可见")]),a._v(" "),t("li",[a._v("传递性 : A happends - before B , B happends - before C , 那么 A happends - before C")])]),a._v(" "),t("h2",{attrs:{id:"java-顺序一致性内存模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-顺序一致性内存模型"}},[a._v("#")]),a._v(" Java 顺序一致性内存模型")]),a._v(" "),t("blockquote",[t("p",[a._v("程序如果没有正确同步, 就会出现数据竞争问题, 相反, 如果程序设置了合理的正确同步, 那就一定不会出现数据竞争, 这一点就由JMM的顺序一致性来保证")])]),a._v(" "),t("p",[a._v("如果做了线程同步, 那就一定会有JMM的顺序一致性加持, 来保证数据的一致结果, 反之则不保证数据的一致性结果.")]),a._v(" "),t("p",[a._v("理想状态下的数据概念模型与我们的意图完全相符, AB两条线程, 同时对数字 1 进行加1操作, 结果 为 3")]),a._v(" "),t("h2",{attrs:{id:"java-同步原语"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-同步原语"}},[a._v("#")]),a._v(" Java 同步原语")]),a._v(" "),t("p",[a._v("Load 指令, 使缓存失效, 从主内存读取数据")]),a._v(" "),t("p",[a._v("Store 指令, 使写操作之后将内存的值刷新到主内存当中, 保证其他内存可见")]),a._v(" "),t("h3",{attrs:{id:"volatile"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#volatile"}},[a._v("#")]),a._v(" volatile")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("在每个volatile写操作前插入StoreStore屏障")]),a._v(" "),t("p",[a._v("volatile 写")]),a._v(" "),t("p",[a._v("在写操作后插入StoreLoad屏障")])]),a._v(" "),t("li",[t("p",[a._v("在每个volatile读操作前插入LoadLoad屏障")]),a._v(" "),t("p",[a._v("volatile 读")]),a._v(" "),t("p",[a._v("在读操作后插入LoadStore屏障")])])]),a._v(" "),t("p",[a._v("StoreLoad 具备其他3个屏障的所有特性, 开销较大")]),a._v(" "),t("p",[a._v("在一个 volatile 变量读之后, 无论是什么操作, 不允许进行重排序;")]),a._v(" "),t("p",[a._v("在一个 volatile 变量写之前, 无论是什么操作, 不允许进行重排序;")]),a._v(" "),t("p",[a._v("在一个 volatile 变量写之后是 volatile 读, 不允许进行重排序;")]),a._v(" "),t("p",[a._v("对一个 volatile 变量的读/写具有可见性和原子性, 但对于 volatile 变量的运算操作不具有原子性, 比如对volatile++")]),a._v(" "),t("blockquote",[t("p",[a._v("volatile写和volatile读的内存屏障插入策略非常保守。在实际执行时，只要不改变volatile写-读的内存语义，编译器可以根据具体情况省略不必要的屏障。")])]),a._v(" "),t("p",[a._v("X86处理器仅会对写-读操作做重排序。")]),a._v(" "),t("p",[a._v("X86不会对读-读、读-写和写-写操作做重排序，")]),a._v(" "),t("p",[a._v("因此在X86处理器中会省略掉这3种操作类型对应的内存屏障")]),a._v(" "),t("h3",{attrs:{id:"final"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#final"}},[a._v("#")]),a._v(" final")]),a._v(" "),t("ul",[t("li",[a._v("final 写操作之后插入 StoreStore屏障")]),a._v(" "),t("li",[a._v("final 读操作之前插入 LoadLoad屏障")])]),a._v(" "),t("p",[a._v("对 final 域的写, 编译器和处理器遵循以下两个重排序规则")]),a._v(" "),t("ol",[t("li",[a._v("禁止将包含final域的写入的构造函数, 与该对象的引用赋值进行重排序")]),a._v(" "),t("li",[a._v("初次读包含final域的引用 与 读取该对象中的 final 域禁止重排序")])]),a._v(" "),t("p",[a._v("对于以上两个规则, 是因为, JMM禁止编译器把 final域写重排序到构造函数之后(外面), 因为在final域写之后, return 该对象执行, 会插入一条 StoreStore 屏障")]),a._v(" "),t("p",[a._v("对于 final 域的读, JMM会进制编译器把 final 域读与之前的操作进行重排序, 在读 final 域之前会插入一个 LoadLoad 屏障,")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[a._v("例 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" 对象"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("A")]),a._v(" 定义两个变量为"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("  在我们使用 \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("A")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n       \t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n \t\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" \n        \n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("A")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        \t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("i "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("A")]),a._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("A")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" \n\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br")])]),t("p",[a._v("在调用 a.i 的时候, 此时有可能读不到值, 而在读 a.j 的时候则一定可以. 原因就是因为 LoadLoad 屏障的禁止重排序.")]),a._v(" "),t("blockquote",[t("p",[a._v("通过以上的内容, 我们知道, 当拿到一个对象的引用的时候, 在读取该对象内final域的时候, 该值一定是初始化之后的值, 而普通对象则不一定.")])]),a._v(" "),t("h3",{attrs:{id:"锁的内存语义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#锁的内存语义"}},[a._v("#")]),a._v(" 锁的内存语义")]),a._v(" "),t("blockquote",[t("p",[a._v("锁是java并发编程中最重要的同步机制。锁除了让临界区互斥执行外，还可以让释放锁的线程向获取同一个锁的线程发送消息")])]),a._v(" "),t("p",[a._v("当线程尝试释放锁时, JMM会将线程内的共享变量, 刷新到主内存当中.")]),a._v(" "),t("p",[a._v("当线程尝试获取锁是, JMM会将线程内的共享变量地址设为无效.从而临界区的变量必须从主内存当中重新获取.")]),a._v(" "),t("p",[a._v("释放锁与 volatile 写具有相同的内存语义")]),a._v(" "),t("p",[a._v("获取锁与 volatile 读具有相同的内存语义")]),a._v(" "),t("p",[a._v("Java中锁的内存语义可以通过一个锁的实现来理解, 那就是 ReentrantLock .")]),a._v(" "),t("p",[a._v('ReentrantLock 依赖 Java 中的 AQS同步框架 (AbstractQueuedSynchronizer)来实现. 该框架通过使用一个 volatile 变量来代替"信号"')]),a._v(" "),t("p",[a._v("ReentrantLock 在获取锁时, 先获取到 volatile 关键词修饰的信号 state, 在使用 CAS 将该信号量更新成已上锁的状态.在释放锁的最后, 会将这个值改为无锁状态.")]),a._v(" "),t("p",[a._v("CAS 会调用 cmpxchg 指令进行原子操作, 同样在调用处理器指令的时候, 会根据处理器类型来决定具体的执行指令, 如果在单处理器机器上执行时, 将直接执行 cmpxchg 指令, 而在多处理器机器上执行时, 会增加 Lock 前缀, 最终执行指令为, Lock cmpxchg.")]),a._v(" "),t("p",[a._v("关于  Lock 前缀, 这里简单总结一下. 在执行前增加 Lock 前缀")]),a._v(" "),t("ol",[t("li",[a._v("保证了对内存操作的原子性 (通过锁内存总线来实现, 这样会使所有处理器无法访问内存数据. 所以还有另外一种情况, 即所需要操作的数据在带有 Lock 前缀指令执行之前就已经被持有该缓存行的处理器锁定, 则不会通过锁总线来完成这步指令, 因为此时的数据无法被其他处理器读取, 该操作成为缓存锁定 . 但当处理器竞争程度较高, 或指令内存地址未对齐时, 仍会锁住总线)")]),a._v(" "),t("li",[a._v("禁止重排序")]),a._v(" "),t("li",[a._v("写入缓存的值刷新到主内存中")])]),a._v(" "),t("blockquote",[t("p",[a._v("concurrent 包实现的通用化模式")]),a._v(" "),t("ol",[t("li",[a._v("首先, 声明 volatile 共享变量")]),a._v(" "),t("li",[a._v("然后, 使用 CAS 更新来实现线程同步")]),a._v(" "),t("li",[a._v("同时, 配合 volatile 的读/写和CAS所具有的volatile读和写的内存语义来实现线程通信")])])]),a._v(" "),t("h2",{attrs:{id:"内存模型总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内存模型总结"}},[a._v("#")]),a._v(" 内存模型总结")]),a._v(" "),t("ul",[t("li",[a._v("Java 内存模型")]),a._v(" "),t("li",[a._v("Java 顺序一致性内存模型")]),a._v(" "),t("li",[a._v("处理器内存模型")])]),a._v(" "),t("p",[a._v("内存模型的强弱关系")]),a._v(" "),t("p",[a._v("顺序一致性模型 > 语言内存模型 > 处理器内存模型")]),a._v(" "),t("p",[a._v("性能关系")]),a._v(" "),t("p",[a._v("处理器内存模型 > 语言内存模型 > 顺序一致性模型")])])}),[],!1,null,null,null);v.default=_.exports}}]);